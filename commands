autograder@waluigi:~/autograder-vue/ag-website-vue/ag-client-typescript$ docker exec -it typescript-cli-django python3 manage.py shell
Python 3.6.5 (default, May  5 2018, 03:09:35) 
Type 'copyright', 'credits' or 'license' for more information
IPython 6.0.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: from autograder.core.models import *

In [2]: Course.objects.validate_and_create(name='No Semester', semester=None, year=2020)
---------------------------------------------------------------------------
ProgrammingError                          Traceback (most recent call last)
/usr/local/lib/python3.6/site-packages/django/db/backends/utils.py in _execute(self, sql, params, *ignored_wrapper_args)
     84             else:
---> 85                 return self.cursor.execute(sql, params)
     86 

ProgrammingError: relation "core_course" does not exist
LINE 1: SELECT (1) AS "a" FROM "core_course" WHERE (NOT ("core_cours...
                               ^


The above exception was the direct cause of the following exception:

ProgrammingError                          Traceback (most recent call last)
<ipython-input-2-8aaee6741f1c> in <module>()
----> 1 Course.objects.validate_and_create(name='No Semester', semester=None, year=2020)

/usr/src/app/autograder/core/models/ag_model_base.py in validate_and_create(self, **kwargs)
     76                         setattr(instance, field_name, value)
     77 
---> 78             instance.full_clean()
     79             instance.save()
     80 

/usr/local/lib/python3.6/site-packages/django/db/models/base.py in full_clean(self, exclude, validate_unique)
   1149         # same with Model.clean() for consistency.
   1150         try:
-> 1151             self.clean()
   1152         except ValidationError as e:
   1153             errors = e.update_error_dict(errors)

/usr/src/app/autograder/core/models/course.py in clean(self)
    125             pk=self.pk
    126         ).filter(
--> 127             name=self.name, semester=self.semester, year=self.year
    128         ).exists()
    129         if duplicate_exists:

/usr/local/lib/python3.6/site-packages/django/db/models/query.py in exists(self)
    713     def exists(self):
    714         if self._result_cache is None:
--> 715             return self.query.has_results(using=self.db)
    716         return bool(self._result_cache)
    717 

/usr/local/lib/python3.6/site-packages/django/db/models/sql/query.py in has_results(self, using)
    507         q.set_limits(high=1)
    508         compiler = q.get_compiler(using=using)
--> 509         return compiler.has_results()
    510 
    511     def combine(self, rhs, connector):

/usr/local/lib/python3.6/site-packages/django/db/models/sql/compiler.py in has_results(self)
   1031         self.query.add_extra({'a': 1}, None, None, None, None, None)
   1032         self.query.set_extra_mask(['a'])
-> 1033         return bool(self.execute_sql(SINGLE))
   1034 
   1035     def execute_sql(self, result_type=MULTI, chunked_fetch=False, chunk_size=GET_ITERATOR_CHUNK_SIZE):

/usr/local/lib/python3.6/site-packages/django/db/models/sql/compiler.py in execute_sql(self, result_type, chunked_fetch, chunk_size)
   1062             cursor = self.connection.cursor()
   1063         try:
-> 1064             cursor.execute(sql, params)
   1065         except Exception:
   1066             # Might fail for server-side cursors (e.g. connection closed)

/usr/local/lib/python3.6/site-packages/django/db/backends/utils.py in execute(self, sql, params)
     98         start = time()
     99         try:
--> 100             return super().execute(sql, params)
    101         finally:
    102             stop = time()

/usr/local/lib/python3.6/site-packages/django/db/backends/utils.py in execute(self, sql, params)
     66 
     67     def execute(self, sql, params=None):
---> 68         return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)
     69 
     70     def executemany(self, sql, param_list):

/usr/local/lib/python3.6/site-packages/django/db/backends/utils.py in _execute_with_wrappers(self, sql, params, many, executor)
     75         for wrapper in reversed(self.db.execute_wrappers):
     76             executor = functools.partial(wrapper, executor)
---> 77         return executor(sql, params, many, context)
     78 
     79     def _execute(self, sql, params, *ignored_wrapper_args):

/usr/local/lib/python3.6/site-packages/django/db/backends/utils.py in _execute(self, sql, params, *ignored_wrapper_args)
     83                 return self.cursor.execute(sql)
     84             else:
---> 85                 return self.cursor.execute(sql, params)
     86 
     87     def _executemany(self, sql, param_list, *ignored_wrapper_args):

/usr/local/lib/python3.6/site-packages/django/db/utils.py in __exit__(self, exc_type, exc_value, traceback)
     87                 if dj_exc_type not in (DataError, IntegrityError):
     88                     self.wrapper.errors_occurred = True
---> 89                 raise dj_exc_value.with_traceback(traceback) from exc_value
     90 
     91     def __call__(self, func):

/usr/local/lib/python3.6/site-packages/django/db/backends/utils.py in _execute(self, sql, params, *ignored_wrapper_args)
     83                 return self.cursor.execute(sql)
     84             else:
---> 85                 return self.cursor.execute(sql, params)
     86 
     87     def _executemany(self, sql, param_list, *ignored_wrapper_args):

ProgrammingError: relation "core_course" does not exist
LINE 1: SELECT (1) AS "a" FROM "core_course" WHERE (NOT ("core_cours...
                               ^


In [3]: Course.objects.validate_and_create(name='No Semester', semester=None, year=2020)
Out[3]: <Course: <Course: 1>>

In [4]: Course.objects.validate_and_create(name='No year, semester=Semester.fall, year=None)
  File "<ipython-input-4-788b605928c8>", line 1
    Course.objects.validate_and_create(name='No year, semester=Semester.fall, year=None)
                                                                                        ^
SyntaxError: EOL while scanning string literal


In [5]: Course.objects.validate_and_create(name='No year', semester=Semester.fall, year=None)
Out[5]: <Course: <Course: 2>>

In [6]: Course.objects.validate_and_create(name='EECS 183', semester=Semester.fall, year=2018)
Out[6]: <Course: <Course: 3>>

In [7]: Course.objects.validate_and_create(name='EECS 183', semester=Semester.winter, year=2018)
Out[7]: <Course: <Course: 4>>

In [8]: Course.objects.validate_and_create(name='EECS 183', semester=Semester.spring, year=2018)
Out[8]: <Course: <Course: 5>>

In [9]: Course.objects.validate_and_create(name='EECS 183', semester=Semester.summer, year=2018)
Out[9]: <Course: <Course: 6>>

In [10]: from django.contrib.auth.models import User

In [11]: admin = User.objects.create(username='admin')

In [12]: staff = User.objects.create(username='staff')

In [13]: staff = User.objects.create(username='student')

In [14]: staff = User.objects.create(username='handgrader')

In [15]: 
