{
    "defaultSeverity": "error",
    "jsRules": {},
    "extends": ["tslint-eslint-rules"],
    "rulesDirectory": ["tslint-consistent-codestyle"],
    "rules": {
        // Typescript-specific
        "adjacent-overload-signatures": true,
        "ban-types": {
            "options": [
                ["Object", "Avoid using the `Object` type. Did you mean `object`?"],
                ["Function", "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."],
                ["Boolean", "Avoid using the `Boolean` type. Did you mean `boolean`?"],
                ["Number", "Avoid using the `Number` type. Did you mean `number`?"],
                ["String", "Avoid using the `String` type. Did you mean `string`?"],
                ["Symbol", "Avoid using the `Symbol` type. Did you mean `symbol`?"]
            ]
        },
        "no-any": true,
        "no-namespace": true,
        "no-var-requires": true,
        "typedef-whitespace": [
            true,
            {
                "call-signature": "nospace",
                "index-signature": "nospace",
                "parameter": "nospace",
                "property-declaration": "nospace",
                "variable-declaration": "nospace"
            },
            {
                "call-signature": "onespace",
                "index-signature": "onespace",
                "parameter": "onespace",
                "property-declaration": "onespace",
                "variable-declaration": "onespace"
            }
        ],

        // Functionality
        "await-promise": true,
        "curly": true,
        "forin": true,
        "label-position": true,
        "no-arg": true,
        "no-bitwise": true,
        "no-conditional-assignment": true,
        "no-construct": true,
        "no-debugger": true,
        "no-duplicate-super": true,
        "no-duplicate-switch-case": true,
        "no-duplicate-variable": [
            true,
            "check-parameters"
        ],
        "no-dynamic-delete": true,
        "no-eval": true,

        "no-floating-promises": {
            "severity": "warning"
        },

        "no-for-in-array": true,
        "no-object-literal-type-assertion": true,
        "no-return-await": true,
        "no-shadowed-variable": {
            "severity": "warning"
        },
        "no-sparse-arrays": true,
        "no-string-throw": true,
        "no-switch-case-fall-through": true,
        "no-unbound-method": true,
        "no-unsafe-finally": true,
        "no-unused-expression": {
            "severity": "warning"
        },
        "no-var-keyword": true,
        "prefer-object-spread": {
            "severity": "warning"
        },
        "radix": true,
        "strict-boolean-expressions": {
            "severity": "warning"
        },
        "triple-equals": true,
        "use-isnan": true,

        // Maintainability
        "deprecation": true,
        "eofline": true,
        "indent": [true, "spaces", 4],
        "linebreak-style": [true, "LF"],
        // Ignore imports and wrapped imports, i.e.:
        // import { spam } from 'really/long/path';
        // - or -
        // import {
        //     spam, egg, sausage, baked_beans, lobster
        // } from 'really/long/path';
        "max-line-length": [true, {"limit": 100, "ignore-pattern": "^import |^} from"}],
        "no-duplicate-imports": true,
        "no-require-imports": true,
        "no-trailing-whitespace": true,
        "trailing-comma": [true, {"multiline": "ignore", "singleline": "never"}],

        // Style
        "align": [
            true,
            "parameters",
            "arguments",
            "statements",
            "elements",
            "members"
        ],
        "array-type": [true, "array"],
        "class-name": true,
        "comment-format": [true, "check-space"],
        "encoding": true,
        "import-spacing": true,
        "new-parens": true,
        "no-boolean-literal-compare": true,
        // Currently, this incorrectly flags HTML in .vue files.
        // See https://github.com/palantir/tslint/issues/2099
        // "no-consecutive-blank-lines": [true, 2],
        "no-reference-import": true,
        "no-unnecessary-callback-wrapper": true,
        "one-variable-per-declaration": true,
        "ordered-imports": [true, {
            "grouped-imports": true,
            "import-sources-order": "case-insensitive",
            "named-imports-order": "case-insensitive",
            "module-source-path": "full"
        }],
        "prefer-method-signature": true,
        "semicolon": [true, "always"],
        "space-before-function-paren": [true, {
            "anonymous": "never",
            "asyncArrow": "always",
            "constructor": "never",
            "method": "never",
            "named": "never"
        }],
        "space-within-parens": [true, 0],
        "switch-final-break": true,
        "variable-name": [true, "allow-snake-case", "ban-keywords"],
        "whitespace": [
            true,
            "check-branch",
            "check-decl",
            "check-operator",
            "check-module",
            "check-separator",
            "check-type",
            "check-typecast",
            "check-preblock",
            "check-type-operator",
            "check-rest-spread"
        ],

        // tslint-eslint-rules
        "brace-style": [
            true,
            "stroustrup"
            // {"allowSingleLine": false}
        ],

        // tslint-consistent-codestyle
        "naming-convention": [
            true,
            // Use snake_case unless otherwise specified.
            {"type": "default", "format": ["snake_case"],
                "leadingUnderscore": "forbid", "trailingUnderscore": "forbid"},
            {"type": "enumMember", "format": "snake_case"},

            // Readonly members can be upper case.
            {"type": "member", "modifiers": ["readonly"], "format": ["snake_case", "UPPER_CASE"]},

            // Global constants should be upper case.
            {"type": "variable", "modifiers": ["global", "const"], "format": ["UPPER_CASE"]},

            // Allow leading underscores for private properties and methods.
            {"type": "member", "modifiers": "private", "leadingUnderscore": "allow"},
            {"type": "member", "modifiers": "protected", "leadingUnderscore": "allow"},

            // Whitelist for inherited methods.
            {"type": "method", "filter": "^(toJSON | toString)$", "format": null},

            // PascalCase for types, classes, interfaces, enums, etc.
            {"type": "type", "format": "PascalCase"}
        ]
    }
}
